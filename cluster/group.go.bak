package cluster

type Group struct {
	ID string
	Servers map[string]string //key: ip value: register key
}

type Cluster struct {
	sync.RWMutex
	discovery *discovery.Discovery
	engines   map[string]*Engine //key: register key
	groups    map[string]*Group  //key: groupid
	stopCh    chan struct{}
}



import "fmt"

// Group is exported
type Group struct {
	ID      string
	engines map[string]*Engine
}

// NewGroup is exported
func NewGroup(id string) *Group {

	return &Group{
		ID:      id,
		engines: make(map[string]*Engine),
	}
}

func (group *Group) AddEngine(ip string) (*Engine, error) {

	if _, ret := group.engines[ip]; !ret {
		engine := NewEngine(ip)
		//go monitor engine state
		//engine.connect()
		group.engines[ip] = engine
		return engine, nil
	}
	return nil, fmt.Errorf("engine %s exists already.")
}

func (group *Group) RemoveEngine(ip string) bool {

	if _, ret := group.engines[ip]; ret {
		//engine.disconect()
		delete(group.engines, ip)
		return true
	}
	return false
}

func (group *Group) ClearEngines() {

	for ip, _ := range group.engines {
		//engine.disconect()
		delete(group.engines, ip)
	}
}
